name: CICD worklfow for python app


on:
    workflow_dispatch:


permissions:
      # required for all workflows
  security-events: write

      # required to fetch internal or private CodeQL packs
  packages: read

      # only required for workflows in private repositories
  actions: read
  contents: read


jobs:
    lint:
      runs-on: [ubuntu-latest]

    
      steps:
          
        - name: Checkout
          uses: actions/checkout@v5.0.0
    

        - name: Setup Python
          uses: actions/setup-python@v6.0.0
          with:
            python-version: '3.13'
    

        - name: ruff-action 
          uses: astral-sh/ruff-action@v3.5.1

        - name: fix any linting issue
          run : ruff check --fix

        - name: Fix any format issue
          run: ruff format


    secret_scanning:
       
        name: gitleaks
        runs-on: ubuntu-latest
        needs: lint


        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Scan leaks in code repo
              uses: gitleaks/gitleaks-action@v2
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    code_scanning:
      needs: secret_scanning
      uses: ./.github/workflows/codeql.yml


    unit_testing:

        runs-on: [ubuntu-latest]
        needs: code_scanning

        strategy:
          matrix:
             python-version: ["3.12"]

    
        steps:
          
            - name: Checkout
              uses: actions/checkout@v5.0.0
        

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v6.0.0
              with:
                python-version: ${{ matrix.python-version }} 
                cache: 'pip'
                

            - name: Install dependencies
              run : |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: test python code
              run : pytest 

    
    
    


           
    docker_build_and_push:
      runs-on: [ubuntu-latest]
      needs: unit_testing
      

      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        REGISTRY: "docker.io"
        IMG_NAME: "aapurva/python-apps"


      outputs:
        image_tag: ${{ steps.set_output.outputs.image_tag }}
      

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4.2.2
          with:
            fetch-depth: 0

        - name: Docker Login
          id: docker-login
          uses: docker/login-action@v3
          with:
            username: ${{ env.DOCKER_HUB_USERNAME }}
            password: ${{ env.DOCKER_HUB_TOKEN }}


        - name: Extract metadata for Docker
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.IMG_NAME }}
            tags: |
              type=sha,format=long
              type=ref,event=branch
              latest


        - name: Build Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            push: false
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            load: true
          
      
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:sha-${{ github.sha }}
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
        
        - name: Push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
      
        - name: Set image tag output
          id: set_output
          run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT


    deploy_app:
      runs-on: [ubuntu-latest]
      needs: docker_build_and_push
     
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}



      steps:

        - name: Checkout Repository
          uses: actions/checkout@v4.2.2


        - name: Docker Login
          id: docker-login
          uses: docker/login-action@v3
          with:
            username: ${{ env.DOCKER_HUB_USERNAME }}
            password: ${{ env.DOCKER_HUB_TOKEN }}


        
        - name: Deploy the Application in GitHub Runner
          run: |

           
           docker run -dp 5000:5000 --name python-app ${{ needs.docker_build_and_push.outputs.image_tag }}

        
         # Step 4: Test app is running
        - name: Curl health endpoint
          run: |
            sleep 5
            curl http://localhost:5000/ || exit 1
        

          


    

    

